from snakemake.utils import min_version

min_version("8.0")

import pandas as pd
import yaml

# Import configuration files
params = yaml.load(open("config/params.yml", "r"), Loader=yaml.SafeLoader)
features = yaml.load(open("config/features.yml", "r"), Loader=yaml.SafeLoader)
samples = pd.read_table("config/samples.tsv", comment="#", dtype="str")

# Generate useful variables
SAMPLES = samples["sample_id"].drop_duplicates().values.tolist()

SAMPLE_LIBRARY = samples[["sample_id", "library_id"]].values.tolist()

HOST_NAMES = [] if features["hosts"] is None else list(features["hosts"].keys())

KRAKEN2_DBS = list(features["databases"]["kraken2"].keys())

BAM_REPORTS = ["stats.tsv", "flagstats.txt", "idxstats.tsv"]

LAST_HOST = HOST_NAMES[-1] if len(HOST_NAMES) > 0 else None


module helpers:
    snakefile:
        github("jlanga/snakehelpers", path="workflow/Snakefile", branch="main")


use rule * from helpers as helpers__*


# Import subworkflows
include: "rules/folders.smk"
include: "rules/samples_tsv_functions.smk"
include: "rules/reads.smk"
include: "rules/hosts.smk"
include: "rules/fastp.smk"
include: "rules/bowtie2.smk"
include: "rules/nonpareil.smk"
include: "rules/singlem.smk"
include: "rules/kraken2.smk"
include: "rules/multiqc.smk"


rule preprocess__all:
    input:
        rules.preprocess__singlem__all.input,
        rules.preprocess__multiqc__all.input,


rule all:
    input:
        rules.preprocess__all.input,
